//
// Diese Datei wurde mit der JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 generiert 
// Siehe <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Änderungen an dieser Datei gehen bei einer Neukompilierung des Quellschemas verloren. 
// Generiert: 2013.01.31 um 12:39:31 AM CET 
//


package net.opengis.wfs.v_1_1_0;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * 
 *             A GetFeatureWithLock request operates identically to a
 *             GetFeature request expect that it attempts to lock the
 *             feature instances in the result set and includes a lock
 *             identifier in its response to a client.  A lock identifier
 *             is an identifier generated by a Web Feature Service that 
 *             a client application can use, in subsequent operations,
 *             to reference the locked set of feature instances.
 *          
 * 
 * <p>Java-Klasse für GetFeatureWithLockType complex type.
 * 
 * <p>Das folgende Schemafragment gibt den erwarteten Content an, der in dieser Klasse enthalten ist.
 * 
 * <pre>
 * &lt;complexType name="GetFeatureWithLockType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.opengis.net/wfs}BaseRequestType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.opengis.net/wfs}Query" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *       &lt;attribute name="expiry" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" default="5" />
 *       &lt;attribute name="resultType" type="{http://www.opengis.net/wfs}ResultTypeType" default="results" />
 *       &lt;attribute name="outputFormat" type="{http://www.w3.org/2001/XMLSchema}string" default="text/xml; subtype=gml/3.1.1" />
 *       &lt;attribute name="maxFeatures" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" />
 *       &lt;attribute name="traverseXlinkDepth" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="traverseXlinkExpiry" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GetFeatureWithLockType", propOrder = {
    "query"
})
public class GetFeatureWithLockType
    extends BaseRequestType
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(name = "Query", required = true)
    protected List<QueryType> query;
    @XmlAttribute(name = "expiry")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger expiry;
    @XmlAttribute(name = "resultType")
    protected ResultTypeType resultType;
    @XmlAttribute(name = "outputFormat")
    protected String outputFormat;
    @XmlAttribute(name = "maxFeatures")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger maxFeatures;
    @XmlAttribute(name = "traverseXlinkDepth")
    protected String traverseXlinkDepth;
    @XmlAttribute(name = "traverseXlinkExpiry")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger traverseXlinkExpiry;

    /**
     * Gets the value of the query property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the query property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuery().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link QueryType }
     * 
     * 
     */
    public List<QueryType> getQuery() {
        if (query == null) {
            query = new ArrayList<QueryType>();
        }
        return this.query;
    }

    /**
     * Ruft den Wert der expiry-Eigenschaft ab.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getExpiry() {
        if (expiry == null) {
            return new BigInteger("5");
        } else {
            return expiry;
        }
    }

    /**
     * Legt den Wert der expiry-Eigenschaft fest.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setExpiry(BigInteger value) {
        this.expiry = value;
    }

    /**
     * Ruft den Wert der resultType-Eigenschaft ab.
     * 
     * @return
     *     possible object is
     *     {@link ResultTypeType }
     *     
     */
    public ResultTypeType getResultType() {
        if (resultType == null) {
            return ResultTypeType.RESULTS;
        } else {
            return resultType;
        }
    }

    /**
     * Legt den Wert der resultType-Eigenschaft fest.
     * 
     * @param value
     *     allowed object is
     *     {@link ResultTypeType }
     *     
     */
    public void setResultType(ResultTypeType value) {
        this.resultType = value;
    }

    /**
     * Ruft den Wert der outputFormat-Eigenschaft ab.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOutputFormat() {
        if (outputFormat == null) {
            return "text/xml; subtype=gml/3.1.1";
        } else {
            return outputFormat;
        }
    }

    /**
     * Legt den Wert der outputFormat-Eigenschaft fest.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOutputFormat(String value) {
        this.outputFormat = value;
    }

    /**
     * Ruft den Wert der maxFeatures-Eigenschaft ab.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxFeatures() {
        return maxFeatures;
    }

    /**
     * Legt den Wert der maxFeatures-Eigenschaft fest.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxFeatures(BigInteger value) {
        this.maxFeatures = value;
    }

    /**
     * Ruft den Wert der traverseXlinkDepth-Eigenschaft ab.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTraverseXlinkDepth() {
        return traverseXlinkDepth;
    }

    /**
     * Legt den Wert der traverseXlinkDepth-Eigenschaft fest.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTraverseXlinkDepth(String value) {
        this.traverseXlinkDepth = value;
    }

    /**
     * Ruft den Wert der traverseXlinkExpiry-Eigenschaft ab.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getTraverseXlinkExpiry() {
        return traverseXlinkExpiry;
    }

    /**
     * Legt den Wert der traverseXlinkExpiry-Eigenschaft fest.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setTraverseXlinkExpiry(BigInteger value) {
        this.traverseXlinkExpiry = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<QueryType> theQuery;
            theQuery = this.getQuery();
            strategy.appendField(locator, this, "query", buffer, theQuery);
        }
        {
            BigInteger theExpiry;
            theExpiry = this.getExpiry();
            strategy.appendField(locator, this, "expiry", buffer, theExpiry);
        }
        {
            ResultTypeType theResultType;
            theResultType = this.getResultType();
            strategy.appendField(locator, this, "resultType", buffer, theResultType);
        }
        {
            String theOutputFormat;
            theOutputFormat = this.getOutputFormat();
            strategy.appendField(locator, this, "outputFormat", buffer, theOutputFormat);
        }
        {
            BigInteger theMaxFeatures;
            theMaxFeatures = this.getMaxFeatures();
            strategy.appendField(locator, this, "maxFeatures", buffer, theMaxFeatures);
        }
        {
            String theTraverseXlinkDepth;
            theTraverseXlinkDepth = this.getTraverseXlinkDepth();
            strategy.appendField(locator, this, "traverseXlinkDepth", buffer, theTraverseXlinkDepth);
        }
        {
            BigInteger theTraverseXlinkExpiry;
            theTraverseXlinkExpiry = this.getTraverseXlinkExpiry();
            strategy.appendField(locator, this, "traverseXlinkExpiry", buffer, theTraverseXlinkExpiry);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof GetFeatureWithLockType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final GetFeatureWithLockType that = ((GetFeatureWithLockType) object);
        {
            List<QueryType> lhsQuery;
            lhsQuery = this.getQuery();
            List<QueryType> rhsQuery;
            rhsQuery = that.getQuery();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "query", lhsQuery), LocatorUtils.property(thatLocator, "query", rhsQuery), lhsQuery, rhsQuery)) {
                return false;
            }
        }
        {
            BigInteger lhsExpiry;
            lhsExpiry = this.getExpiry();
            BigInteger rhsExpiry;
            rhsExpiry = that.getExpiry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expiry", lhsExpiry), LocatorUtils.property(thatLocator, "expiry", rhsExpiry), lhsExpiry, rhsExpiry)) {
                return false;
            }
        }
        {
            ResultTypeType lhsResultType;
            lhsResultType = this.getResultType();
            ResultTypeType rhsResultType;
            rhsResultType = that.getResultType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resultType", lhsResultType), LocatorUtils.property(thatLocator, "resultType", rhsResultType), lhsResultType, rhsResultType)) {
                return false;
            }
        }
        {
            String lhsOutputFormat;
            lhsOutputFormat = this.getOutputFormat();
            String rhsOutputFormat;
            rhsOutputFormat = that.getOutputFormat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "outputFormat", lhsOutputFormat), LocatorUtils.property(thatLocator, "outputFormat", rhsOutputFormat), lhsOutputFormat, rhsOutputFormat)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxFeatures;
            lhsMaxFeatures = this.getMaxFeatures();
            BigInteger rhsMaxFeatures;
            rhsMaxFeatures = that.getMaxFeatures();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxFeatures", lhsMaxFeatures), LocatorUtils.property(thatLocator, "maxFeatures", rhsMaxFeatures), lhsMaxFeatures, rhsMaxFeatures)) {
                return false;
            }
        }
        {
            String lhsTraverseXlinkDepth;
            lhsTraverseXlinkDepth = this.getTraverseXlinkDepth();
            String rhsTraverseXlinkDepth;
            rhsTraverseXlinkDepth = that.getTraverseXlinkDepth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "traverseXlinkDepth", lhsTraverseXlinkDepth), LocatorUtils.property(thatLocator, "traverseXlinkDepth", rhsTraverseXlinkDepth), lhsTraverseXlinkDepth, rhsTraverseXlinkDepth)) {
                return false;
            }
        }
        {
            BigInteger lhsTraverseXlinkExpiry;
            lhsTraverseXlinkExpiry = this.getTraverseXlinkExpiry();
            BigInteger rhsTraverseXlinkExpiry;
            rhsTraverseXlinkExpiry = that.getTraverseXlinkExpiry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "traverseXlinkExpiry", lhsTraverseXlinkExpiry), LocatorUtils.property(thatLocator, "traverseXlinkExpiry", rhsTraverseXlinkExpiry), lhsTraverseXlinkExpiry, rhsTraverseXlinkExpiry)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<QueryType> theQuery;
            theQuery = this.getQuery();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "query", theQuery), currentHashCode, theQuery);
        }
        {
            BigInteger theExpiry;
            theExpiry = this.getExpiry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expiry", theExpiry), currentHashCode, theExpiry);
        }
        {
            ResultTypeType theResultType;
            theResultType = this.getResultType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resultType", theResultType), currentHashCode, theResultType);
        }
        {
            String theOutputFormat;
            theOutputFormat = this.getOutputFormat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "outputFormat", theOutputFormat), currentHashCode, theOutputFormat);
        }
        {
            BigInteger theMaxFeatures;
            theMaxFeatures = this.getMaxFeatures();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxFeatures", theMaxFeatures), currentHashCode, theMaxFeatures);
        }
        {
            String theTraverseXlinkDepth;
            theTraverseXlinkDepth = this.getTraverseXlinkDepth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "traverseXlinkDepth", theTraverseXlinkDepth), currentHashCode, theTraverseXlinkDepth);
        }
        {
            BigInteger theTraverseXlinkExpiry;
            theTraverseXlinkExpiry = this.getTraverseXlinkExpiry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "traverseXlinkExpiry", theTraverseXlinkExpiry), currentHashCode, theTraverseXlinkExpiry);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof GetFeatureWithLockType) {
            final GetFeatureWithLockType copy = ((GetFeatureWithLockType) draftCopy);
            if ((this.query!= null)&&(!this.query.isEmpty())) {
                List<QueryType> sourceQuery;
                sourceQuery = this.getQuery();
                @SuppressWarnings("unchecked")
                List<QueryType> copyQuery = ((List<QueryType> ) strategy.copy(LocatorUtils.property(locator, "query", sourceQuery), sourceQuery));
                copy.query = null;
                List<QueryType> uniqueQueryl = copy.getQuery();
                uniqueQueryl.addAll(copyQuery);
            } else {
                copy.query = null;
            }
            if (this.expiry!= null) {
                BigInteger sourceExpiry;
                sourceExpiry = this.getExpiry();
                BigInteger copyExpiry = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "expiry", sourceExpiry), sourceExpiry));
                copy.setExpiry(copyExpiry);
            } else {
                copy.expiry = null;
            }
            if (this.resultType!= null) {
                ResultTypeType sourceResultType;
                sourceResultType = this.getResultType();
                ResultTypeType copyResultType = ((ResultTypeType) strategy.copy(LocatorUtils.property(locator, "resultType", sourceResultType), sourceResultType));
                copy.setResultType(copyResultType);
            } else {
                copy.resultType = null;
            }
            if (this.outputFormat!= null) {
                String sourceOutputFormat;
                sourceOutputFormat = this.getOutputFormat();
                String copyOutputFormat = ((String) strategy.copy(LocatorUtils.property(locator, "outputFormat", sourceOutputFormat), sourceOutputFormat));
                copy.setOutputFormat(copyOutputFormat);
            } else {
                copy.outputFormat = null;
            }
            if (this.maxFeatures!= null) {
                BigInteger sourceMaxFeatures;
                sourceMaxFeatures = this.getMaxFeatures();
                BigInteger copyMaxFeatures = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "maxFeatures", sourceMaxFeatures), sourceMaxFeatures));
                copy.setMaxFeatures(copyMaxFeatures);
            } else {
                copy.maxFeatures = null;
            }
            if (this.traverseXlinkDepth!= null) {
                String sourceTraverseXlinkDepth;
                sourceTraverseXlinkDepth = this.getTraverseXlinkDepth();
                String copyTraverseXlinkDepth = ((String) strategy.copy(LocatorUtils.property(locator, "traverseXlinkDepth", sourceTraverseXlinkDepth), sourceTraverseXlinkDepth));
                copy.setTraverseXlinkDepth(copyTraverseXlinkDepth);
            } else {
                copy.traverseXlinkDepth = null;
            }
            if (this.traverseXlinkExpiry!= null) {
                BigInteger sourceTraverseXlinkExpiry;
                sourceTraverseXlinkExpiry = this.getTraverseXlinkExpiry();
                BigInteger copyTraverseXlinkExpiry = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "traverseXlinkExpiry", sourceTraverseXlinkExpiry), sourceTraverseXlinkExpiry));
                copy.setTraverseXlinkExpiry(copyTraverseXlinkExpiry);
            } else {
                copy.traverseXlinkExpiry = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GetFeatureWithLockType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof GetFeatureWithLockType) {
            final GetFeatureWithLockType target = this;
            final GetFeatureWithLockType leftObject = ((GetFeatureWithLockType) left);
            final GetFeatureWithLockType rightObject = ((GetFeatureWithLockType) right);
            {
                List<QueryType> lhsQuery;
                lhsQuery = leftObject.getQuery();
                List<QueryType> rhsQuery;
                rhsQuery = rightObject.getQuery();
                target.query = null;
                List<QueryType> uniqueQueryl = target.getQuery();
                uniqueQueryl.addAll(((List<QueryType> ) strategy.merge(LocatorUtils.property(leftLocator, "query", lhsQuery), LocatorUtils.property(rightLocator, "query", rhsQuery), lhsQuery, rhsQuery)));
            }
            {
                BigInteger lhsExpiry;
                lhsExpiry = leftObject.getExpiry();
                BigInteger rhsExpiry;
                rhsExpiry = rightObject.getExpiry();
                target.setExpiry(((BigInteger) strategy.merge(LocatorUtils.property(leftLocator, "expiry", lhsExpiry), LocatorUtils.property(rightLocator, "expiry", rhsExpiry), lhsExpiry, rhsExpiry)));
            }
            {
                ResultTypeType lhsResultType;
                lhsResultType = leftObject.getResultType();
                ResultTypeType rhsResultType;
                rhsResultType = rightObject.getResultType();
                target.setResultType(((ResultTypeType) strategy.merge(LocatorUtils.property(leftLocator, "resultType", lhsResultType), LocatorUtils.property(rightLocator, "resultType", rhsResultType), lhsResultType, rhsResultType)));
            }
            {
                String lhsOutputFormat;
                lhsOutputFormat = leftObject.getOutputFormat();
                String rhsOutputFormat;
                rhsOutputFormat = rightObject.getOutputFormat();
                target.setOutputFormat(((String) strategy.merge(LocatorUtils.property(leftLocator, "outputFormat", lhsOutputFormat), LocatorUtils.property(rightLocator, "outputFormat", rhsOutputFormat), lhsOutputFormat, rhsOutputFormat)));
            }
            {
                BigInteger lhsMaxFeatures;
                lhsMaxFeatures = leftObject.getMaxFeatures();
                BigInteger rhsMaxFeatures;
                rhsMaxFeatures = rightObject.getMaxFeatures();
                target.setMaxFeatures(((BigInteger) strategy.merge(LocatorUtils.property(leftLocator, "maxFeatures", lhsMaxFeatures), LocatorUtils.property(rightLocator, "maxFeatures", rhsMaxFeatures), lhsMaxFeatures, rhsMaxFeatures)));
            }
            {
                String lhsTraverseXlinkDepth;
                lhsTraverseXlinkDepth = leftObject.getTraverseXlinkDepth();
                String rhsTraverseXlinkDepth;
                rhsTraverseXlinkDepth = rightObject.getTraverseXlinkDepth();
                target.setTraverseXlinkDepth(((String) strategy.merge(LocatorUtils.property(leftLocator, "traverseXlinkDepth", lhsTraverseXlinkDepth), LocatorUtils.property(rightLocator, "traverseXlinkDepth", rhsTraverseXlinkDepth), lhsTraverseXlinkDepth, rhsTraverseXlinkDepth)));
            }
            {
                BigInteger lhsTraverseXlinkExpiry;
                lhsTraverseXlinkExpiry = leftObject.getTraverseXlinkExpiry();
                BigInteger rhsTraverseXlinkExpiry;
                rhsTraverseXlinkExpiry = rightObject.getTraverseXlinkExpiry();
                target.setTraverseXlinkExpiry(((BigInteger) strategy.merge(LocatorUtils.property(leftLocator, "traverseXlinkExpiry", lhsTraverseXlinkExpiry), LocatorUtils.property(rightLocator, "traverseXlinkExpiry", rhsTraverseXlinkExpiry), lhsTraverseXlinkExpiry, rhsTraverseXlinkExpiry)));
            }
        }
    }

    public void setQuery(List<QueryType> value) {
        List<QueryType> draftl = this.getQuery();
        draftl.addAll(value);
    }

}
