//
// Diese Datei wurde mit der JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 generiert 
// Siehe <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Änderungen an dieser Datei gehen bei einer Neukompilierung des Quellschemas verloren. 
// Generiert: 2013.01.31 um 12:39:31 AM CET 
//


package net.opengis.wfs.v_1_1_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * 
 *             The DescribeFeatureType operation allows a client application
 *             to request that a Web Feature Service describe one or more
 *             feature types.   A Web Feature Service must be able to generate
 *             feature descriptions as valid GML3 application schemas.
 * 
 *             The schemas generated by the DescribeFeatureType operation can
 *             be used by a client application to validate the output.
 * 
 *             Feature instances within the WFS interface must be specified
 *             using GML3.  The schema of feature instances specified within
 *             the WFS interface must validate against the feature schemas 
 *             generated by the DescribeFeatureType request.
 *          
 * 
 * <p>Java-Klasse für DescribeFeatureTypeType complex type.
 * 
 * <p>Das folgende Schemafragment gibt den erwarteten Content an, der in dieser Klasse enthalten ist.
 * 
 * <pre>
 * &lt;complexType name="DescribeFeatureTypeType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.opengis.net/wfs}BaseRequestType">
 *       &lt;sequence>
 *         &lt;element name="TypeName" type="{http://www.w3.org/2001/XMLSchema}QName" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="outputFormat" type="{http://www.w3.org/2001/XMLSchema}string" default="text/xml; subtype=gml/3.1.1" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DescribeFeatureTypeType", propOrder = {
    "typeName"
})
public class DescribeFeatureTypeType
    extends BaseRequestType
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(name = "TypeName")
    protected List<QName> typeName;
    @XmlAttribute(name = "outputFormat")
    protected String outputFormat;

    /**
     * Gets the value of the typeName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the typeName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTypeName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link QName }
     * 
     * 
     */
    public List<QName> getTypeName() {
        if (typeName == null) {
            typeName = new ArrayList<QName>();
        }
        return this.typeName;
    }

    /**
     * Ruft den Wert der outputFormat-Eigenschaft ab.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOutputFormat() {
        if (outputFormat == null) {
            return "text/xml; subtype=gml/3.1.1";
        } else {
            return outputFormat;
        }
    }

    /**
     * Legt den Wert der outputFormat-Eigenschaft fest.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOutputFormat(String value) {
        this.outputFormat = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<QName> theTypeName;
            theTypeName = this.getTypeName();
            strategy.appendField(locator, this, "typeName", buffer, theTypeName);
        }
        {
            String theOutputFormat;
            theOutputFormat = this.getOutputFormat();
            strategy.appendField(locator, this, "outputFormat", buffer, theOutputFormat);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DescribeFeatureTypeType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DescribeFeatureTypeType that = ((DescribeFeatureTypeType) object);
        {
            List<QName> lhsTypeName;
            lhsTypeName = this.getTypeName();
            List<QName> rhsTypeName;
            rhsTypeName = that.getTypeName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "typeName", lhsTypeName), LocatorUtils.property(thatLocator, "typeName", rhsTypeName), lhsTypeName, rhsTypeName)) {
                return false;
            }
        }
        {
            String lhsOutputFormat;
            lhsOutputFormat = this.getOutputFormat();
            String rhsOutputFormat;
            rhsOutputFormat = that.getOutputFormat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "outputFormat", lhsOutputFormat), LocatorUtils.property(thatLocator, "outputFormat", rhsOutputFormat), lhsOutputFormat, rhsOutputFormat)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<QName> theTypeName;
            theTypeName = this.getTypeName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "typeName", theTypeName), currentHashCode, theTypeName);
        }
        {
            String theOutputFormat;
            theOutputFormat = this.getOutputFormat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "outputFormat", theOutputFormat), currentHashCode, theOutputFormat);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof DescribeFeatureTypeType) {
            final DescribeFeatureTypeType copy = ((DescribeFeatureTypeType) draftCopy);
            if ((this.typeName!= null)&&(!this.typeName.isEmpty())) {
                List<QName> sourceTypeName;
                sourceTypeName = this.getTypeName();
                @SuppressWarnings("unchecked")
                List<QName> copyTypeName = ((List<QName> ) strategy.copy(LocatorUtils.property(locator, "typeName", sourceTypeName), sourceTypeName));
                copy.typeName = null;
                List<QName> uniqueTypeNamel = copy.getTypeName();
                uniqueTypeNamel.addAll(copyTypeName);
            } else {
                copy.typeName = null;
            }
            if (this.outputFormat!= null) {
                String sourceOutputFormat;
                sourceOutputFormat = this.getOutputFormat();
                String copyOutputFormat = ((String) strategy.copy(LocatorUtils.property(locator, "outputFormat", sourceOutputFormat), sourceOutputFormat));
                copy.setOutputFormat(copyOutputFormat);
            } else {
                copy.outputFormat = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DescribeFeatureTypeType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof DescribeFeatureTypeType) {
            final DescribeFeatureTypeType target = this;
            final DescribeFeatureTypeType leftObject = ((DescribeFeatureTypeType) left);
            final DescribeFeatureTypeType rightObject = ((DescribeFeatureTypeType) right);
            {
                List<QName> lhsTypeName;
                lhsTypeName = leftObject.getTypeName();
                List<QName> rhsTypeName;
                rhsTypeName = rightObject.getTypeName();
                target.typeName = null;
                List<QName> uniqueTypeNamel = target.getTypeName();
                uniqueTypeNamel.addAll(((List<QName> ) strategy.merge(LocatorUtils.property(leftLocator, "typeName", lhsTypeName), LocatorUtils.property(rightLocator, "typeName", rhsTypeName), lhsTypeName, rhsTypeName)));
            }
            {
                String lhsOutputFormat;
                lhsOutputFormat = leftObject.getOutputFormat();
                String rhsOutputFormat;
                rhsOutputFormat = rightObject.getOutputFormat();
                target.setOutputFormat(((String) strategy.merge(LocatorUtils.property(leftLocator, "outputFormat", lhsOutputFormat), LocatorUtils.property(rightLocator, "outputFormat", rhsOutputFormat), lhsOutputFormat, rhsOutputFormat)));
            }
        }
    }

    public void setTypeName(List<QName> value) {
        List<QName> draftl = this.getTypeName();
        draftl.addAll(value);
    }

}
